// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201202120040_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerString")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerString = ":",
                            CorrectAnswer = false,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerString = "::",
                            CorrectAnswer = false,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerString = ".",
                            CorrectAnswer = true,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 4,
                            AnswerString = "#",
                            CorrectAnswer = false,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 5,
                            AnswerString = "1",
                            CorrectAnswer = false,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 6,
                            AnswerString = "2",
                            CorrectAnswer = false,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 7,
                            AnswerString = "Any number",
                            CorrectAnswer = true,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 8,
                            AnswerString = "None of the above",
                            CorrectAnswer = false,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 9,
                            AnswerString = "‘==’ operator is used to assign values from one variable to another variable,  ‘=’ operator is used to compare value between two variables",
                            CorrectAnswer = false,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 10,
                            AnswerString = "‘=’ operator is used to assign values from one variable to another variable, ‘==’ operator is used to compare value between two variables",
                            CorrectAnswer = true,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 11,
                            AnswerString = "No difference between both operators",
                            CorrectAnswer = false,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 12,
                            AnswerString = "None of the above",
                            CorrectAnswer = false,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 13,
                            AnswerString = "Destructor",
                            CorrectAnswer = true,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 14,
                            AnswerString = "Finalize()",
                            CorrectAnswer = false,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 15,
                            AnswerString = "Constructor",
                            CorrectAnswer = false,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 16,
                            AnswerString = "End",
                            CorrectAnswer = false,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 17,
                            AnswerString = ">=",
                            CorrectAnswer = false,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 18,
                            AnswerString = "!=",
                            CorrectAnswer = false,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 19,
                            AnswerString = "<=",
                            CorrectAnswer = false,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 20,
                            AnswerString = "<>=",
                            CorrectAnswer = true,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 21,
                            AnswerString = "var x = myFunc()",
                            CorrectAnswer = false,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 22,
                            AnswerString = "myfunc",
                            CorrectAnswer = true,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 23,
                            AnswerString = "x = myfunc()",
                            CorrectAnswer = false,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 24,
                            AnswerString = "myfunc()",
                            CorrectAnswer = false,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 25,
                            AnswerString = "string \"10\"",
                            CorrectAnswer = false,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 26,
                            AnswerString = "array of 10 empty strings",
                            CorrectAnswer = false,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 27,
                            AnswerString = "string \"..........\"",
                            CorrectAnswer = true,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 28,
                            AnswerString = "This statement will cause an error",
                            CorrectAnswer = false,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 29,
                            AnswerString = "defines a new two-dimentional array a whose dimentions are 2 and 4",
                            CorrectAnswer = false,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 30,
                            AnswerString = "defines an array a and assigns the values 2 and 4 to a[1] and a[2]",
                            CorrectAnswer = false,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 31,
                            AnswerString = "defines an array a andd assigns the values 2 and 4 to a[0] and a[1]",
                            CorrectAnswer = true,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 32,
                            AnswerString = "defines a three-element array whose elements have indexes 2 through 4",
                            CorrectAnswer = false,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 33,
                            AnswerString = "0",
                            CorrectAnswer = true,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 34,
                            AnswerString = "null",
                            CorrectAnswer = false,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 35,
                            AnswerString = "No output",
                            CorrectAnswer = false,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 36,
                            AnswerString = "Object",
                            CorrectAnswer = false,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 37,
                            AnswerString = "var obj = {};",
                            CorrectAnswer = false,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 38,
                            AnswerString = "var obj = { name: \"Steve\"};",
                            CorrectAnswer = false,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 39,
                            AnswerString = "var obj = { name = \"Steve\"};",
                            CorrectAnswer = true,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 40,
                            AnswerString = "var obj = new Object();",
                            CorrectAnswer = false,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 41,
                            AnswerString = "select * from Persons where FirstName Like 'a%'",
                            CorrectAnswer = false,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 42,
                            AnswerString = "select * from Persons where FirstName='a'",
                            CorrectAnswer = false,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 43,
                            AnswerString = "select * from Persons where FirstName Like '%a'",
                            CorrectAnswer = true,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 44,
                            AnswerString = "select * from Persons where FirstName = '%a%'",
                            CorrectAnswer = false,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 45,
                            AnswerString = "Delete from Persons where FirstName = 'Peter'",
                            CorrectAnswer = true,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 46,
                            AnswerString = "Delete row FirstName = 'Peter' from Persons",
                            CorrectAnswer = false,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 47,
                            AnswerString = "Delete FirstName = 'Peter' from Persons",
                            CorrectAnswer = false,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 48,
                            AnswerString = "None of the above",
                            CorrectAnswer = false,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 49,
                            AnswerString = "Sort by",
                            CorrectAnswer = false,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 50,
                            AnswerString = "Order",
                            CorrectAnswer = false,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 51,
                            AnswerString = "Order by",
                            CorrectAnswer = true,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 52,
                            AnswerString = "Sort",
                            CorrectAnswer = false,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 53,
                            AnswerString = "GET",
                            CorrectAnswer = false,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 54,
                            AnswerString = "FROM",
                            CorrectAnswer = false,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 55,
                            AnswerString = "LIKE",
                            CorrectAnswer = true,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 56,
                            AnswerString = "End",
                            CorrectAnswer = false,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 57,
                            AnswerString = "Select distinct",
                            CorrectAnswer = true,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 58,
                            AnswerString = "Select unique",
                            CorrectAnswer = false,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 59,
                            AnswerString = "Select Different",
                            CorrectAnswer = false,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 60,
                            AnswerString = "<>=",
                            CorrectAnswer = false,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 61,
                            AnswerString = "class employee : data {}",
                            CorrectAnswer = true,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 62,
                            AnswerString = "class employee implements data {}",
                            CorrectAnswer = false,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 63,
                            AnswerString = "class employee imports data {}",
                            CorrectAnswer = false,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 64,
                            AnswerString = "None of the mentioned",
                            CorrectAnswer = false,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 65,
                            AnswerString = "Public",
                            CorrectAnswer = true,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 66,
                            AnswerString = "Protected",
                            CorrectAnswer = false,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 67,
                            AnswerString = "Private",
                            CorrectAnswer = false,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 68,
                            AnswerString = "All of the above",
                            CorrectAnswer = false,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 69,
                            AnswerString = "upper",
                            CorrectAnswer = false,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 70,
                            AnswerString = "base",
                            CorrectAnswer = true,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 71,
                            AnswerString = "this",
                            CorrectAnswer = false,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 72,
                            AnswerString = "None of the above",
                            CorrectAnswer = false,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 73,
                            AnswerString = "overloads",
                            CorrectAnswer = false,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 74,
                            AnswerString = "overrides",
                            CorrectAnswer = false,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 75,
                            AnswerString = "new",
                            CorrectAnswer = true,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 76,
                            AnswerString = "base",
                            CorrectAnswer = false,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 77,
                            AnswerString = "Static class",
                            CorrectAnswer = false,
                            QuestionId = 20
                        },
                        new
                        {
                            AnswerId = 78,
                            AnswerString = "Sealed class",
                            CorrectAnswer = false,
                            QuestionId = 20
                        },
                        new
                        {
                            AnswerId = 79,
                            AnswerString = "Abstract class",
                            CorrectAnswer = true,
                            QuestionId = 20
                        },
                        new
                        {
                            AnswerId = 80,
                            AnswerString = "Derived class",
                            CorrectAnswer = false,
                            QuestionId = 20
                        });
                });

            modelBuilder.Entity("DAL.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ddee1616-3825-42ee-a6bb-3ac478619a4d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "b744a278-8b55-4d29-93aa-93be5b442b1e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Entities.Knowledge", b =>
                {
                    b.Property<int>("KnowledgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KnowledgeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("KnowledgeId");

                    b.ToTable("Knowledges");

                    b.HasData(
                        new
                        {
                            KnowledgeId = 1,
                            KnowledgeName = "C# essentials"
                        },
                        new
                        {
                            KnowledgeId = 2,
                            KnowledgeName = "Javascript"
                        },
                        new
                        {
                            KnowledgeId = 3,
                            KnowledgeName = "SQL"
                        },
                        new
                        {
                            KnowledgeId = 4,
                            KnowledgeName = "OOP"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KnowledgeId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("QuestionId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            KnowledgeId = 1,
                            QuestionString = "Which of the following operator can be used to access the member function of a class"
                        },
                        new
                        {
                            QuestionId = 2,
                            KnowledgeId = 1,
                            QuestionString = "Which of the following gives the correct count of the constructors that a class can define?"
                        },
                        new
                        {
                            QuestionId = 3,
                            KnowledgeId = 1,
                            QuestionString = "Which of the following statements correctly tell the differences between ‘=’ and ‘==’ in C#"
                        },
                        new
                        {
                            QuestionId = 4,
                            KnowledgeId = 1,
                            QuestionString = "What is the correct name of a method which has the same name as that of class and used to destroy objects?"
                        },
                        new
                        {
                            QuestionId = 5,
                            KnowledgeId = 1,
                            QuestionString = "Which of the following operator is not an equality operators"
                        },
                        new
                        {
                            QuestionId = 6,
                            KnowledgeId = 2,
                            QuestionString = "Which of the folowing is not a valid function call?"
                        },
                        new
                        {
                            QuestionId = 7,
                            KnowledgeId = 2,
                            QuestionString = "After executing the Javascript statement a=(new Araray(10)).toString(), what is the value of a?"
                        },
                        new
                        {
                            QuestionId = 8,
                            KnowledgeId = 2,
                            QuestionString = "The JavaScipt statement a = new Array(2,4)"
                        },
                        new
                        {
                            QuestionId = 9,
                            KnowledgeId = 2,
                            QuestionString = @"var x = 0;
do
{ console.log(x) } 
while (x > 0)?"
                        },
                        new
                        {
                            QuestionId = 10,
                            KnowledgeId = 2,
                            QuestionString = "Which of the following is NOT a JavaScript object?"
                        },
                        new
                        {
                            QuestionId = 11,
                            KnowledgeId = 3,
                            QuestionString = "With SQL, how do you select a column named FirstName from a table named Person, whree the value of the column FirstNamae starts with \"a\"?"
                        },
                        new
                        {
                            QuestionId = 12,
                            KnowledgeId = 3,
                            QuestionString = "With SQL, how can you delete the records where the FirstName is Peter in the Persons Table?"
                        },
                        new
                        {
                            QuestionId = 13,
                            KnowledgeId = 3,
                            QuestionString = "Which SQL keyword is used to sort the result-set"
                        },
                        new
                        {
                            QuestionId = 14,
                            KnowledgeId = 3,
                            QuestionString = "Which operator is used to search for a specified pattern in a column?"
                        },
                        new
                        {
                            QuestionId = 15,
                            KnowledgeId = 3,
                            QuestionString = "Which SQL statement is used to return only different values?"
                        },
                        new
                        {
                            QuestionId = 16,
                            KnowledgeId = 4,
                            QuestionString = "Which of the following options define the correct way of implementing an interface data by the class employee?"
                        },
                        new
                        {
                            QuestionId = 17,
                            KnowledgeId = 4,
                            QuestionString = "Which of the following Access specifiers can be used for an interface?"
                        },
                        new
                        {
                            QuestionId = 18,
                            KnowledgeId = 4,
                            QuestionString = "Which of the following keywords can be used to access a member of the base class from derived class?"
                        },
                        new
                        {
                            QuestionId = 19,
                            KnowledgeId = 4,
                            QuestionString = "Which of the following keyword, enables to modify the data and behavior of a base class by replacing its member with a new derived member?"
                        },
                        new
                        {
                            QuestionId = 20,
                            KnowledgeId = 4,
                            QuestionString = "Which of the following options represents the type of class which does not have its own objects but acts as a base class for its subclass?"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Results.AnswerResult", b =>
                {
                    b.Property<int>("AnswerResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionResultId")
                        .HasColumnType("int");

                    b.HasKey("AnswerResultId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionResultId")
                        .IsUnique();

                    b.ToTable("AnswerResults");
                });

            modelBuilder.Entity("DAL.Entities.Results.KnowledgeResult", b =>
                {
                    b.Property<int>("KnowledgeResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("KnowledgeId")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("KnowledgeResultId");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("UserId");

                    b.ToTable("KnowledgeResults");
                });

            modelBuilder.Entity("DAL.Entities.Results.QuestionResult", b =>
                {
                    b.Property<int>("QuestionResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KnowledgeResultId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("QuestionResultId");

                    b.HasIndex("KnowledgeResultId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.Answer", b =>
                {
                    b.HasOne("DAL.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Question", b =>
                {
                    b.HasOne("DAL.Entities.Knowledge", "Knowledge")
                        .WithMany("Questions")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Results.AnswerResult", b =>
                {
                    b.HasOne("DAL.Entities.Answer", "Answer")
                        .WithMany("AnswerResults")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Results.QuestionResult", "QuestionResult")
                        .WithOne("AnswerResult")
                        .HasForeignKey("DAL.Entities.Results.AnswerResult", "QuestionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Results.KnowledgeResult", b =>
                {
                    b.HasOne("DAL.Entities.Knowledge", "Knowledge")
                        .WithMany()
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ApplicationUser", "User")
                        .WithMany("KnowledgeResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Results.QuestionResult", b =>
                {
                    b.HasOne("DAL.Entities.Results.KnowledgeResult", "KnowledgeResult")
                        .WithMany("QuestionResults")
                        .HasForeignKey("KnowledgeResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Question", "Question")
                        .WithMany("QuestionResults")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
